function [KPBC, MPBC,LambdaR] = ApplyBlochBC2D(K,M,InputIdx,OutputIdx,lambX, lambY,PBCdiff)
PBCdiff=round(PBCdiff,6);
numDoF=size(K,1);
numredDoF=numDoF-size(unique(OutputIdx),1);
redDoF=[1:numDoF];
redDoF(:,unique(OutputIdx))=[];
SIdxPBCIn=unique(sort(reshape(InputIdx,[],1)));
SIdxPBCOut=unique(sort(reshape(OutputIdx,[],1)));
SlaveDofsPBC=1:numDoF;
SlaveDofsPBC([SIdxPBCIn,SIdxPBCOut])=[];
[OutInIdx,InOutIdx]=ismember(InputIdx,OutputIdx,'rows');
OutInIdx=find(OutInIdx==1);
InOutIdx(~any(InOutIdx,2),: ) = [];
InputIdx2=InputIdx;
InputIdx2(OutInIdx,1)=InputIdx(InOutIdx,1);
PBCdiff(OutInIdx,:)=PBCdiff(OutInIdx,:)+PBCdiff(InOutIdx,:);
[~,redInputIdx]=ismember(InputIdx2,redDoF','rows');
[~,redSlaveDofs]=ismember(SlaveDofsPBC',redDoF','rows');
LambdaR=spalloc(numDoF,numredDoF,numDoF);
indSlaveDof=sub2ind(size(LambdaR),SlaveDofsPBC,redSlaveDofs');
indInputDof=sub2ind(size(LambdaR),InputIdx2,redInputIdx);
indOutputDof=sub2ind(size(LambdaR),OutputIdx,redInputIdx);
LambdaR(indSlaveDof)=1;
LambdaR(indInputDof)=1;
lambXVec=ones(size(indOutputDof,1),1);
lambXVec(PBCdiff(:,1)>0,1)=lambX;
lambYVec=ones(size(indOutputDof,1),1);
lambYVec(PBCdiff(:,2)>0,1)=lambY;
LambdaL=LambdaR;
LambdaR(indOutputDof)=lambXVec.*lambYVec;
LambdaL(indOutputDof)=lambXVec.^(-1).*lambYVec.^(-1);
 KPBC=transpose(LambdaL)*K*LambdaR;
 MPBC=transpose(LambdaL)*M*LambdaR;